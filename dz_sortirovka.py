import time
import random
import matplotlib.pyplot as plt

# #Пузырььь
# N = 500
# a = [random.randint(1, 99) for n in range(N)]
# v = time.time()
# for i in range(N-1):
#     for j in range(N-1-i):
#         if a[j] > a[j+1]:
#             a[j], a[j+1] = a[j+1], a[j]
# z = time.time()
#
# print(a)
# print(z-v)



# Выбором
# def asd(a):
#     res = 0
#     for i in range(1, len(a)):
#         if a[i]>=a[res]:
#             res = i
#     return res
# def sort(a):
#     for i in range(len(a)-1):
#         j = asd(a[:len(a)-i])
#         f = len(a)-1-i
#         a[j],a[f]=a[f],a[j]
#
# N = 450
# a = [random.randint(1, 99) for n in range(N)]
# v = time.time()
# sort(a)
# z = time.time()
# print(*a)
# print(z-v)


# #Вставка
# def count(a):
#     cnts = [0 for i in range(100)]
#     for el in a:
#         cnts[el] += 1
#     # for i in range(len(a)):
#     #     cnts[a[i]] +=1
#     res = []
#     for i in range(len(cnts)):
#         res += [i]*cnts[i]
#     return res
# N = 500
# a = [random.randint(1, 99) for n in range(N)]
# v = time.time()
# a=count(a)
# z = time.time()
# print(a)
# print(z-v)


# #Мердж
# def merge(A, B):
#     res = []
#     i = 0
#     j = 0
#     while i < len(A) and j < len(B):
#         if A[i] <= B[j]:
#             res.append(A[i])
#             i += 1
#         else:
#             res.append(B[j])
#             j += 1
#     res += A[i:] + B[j:]
#     return res
# N = 500
# A = [random.randint(1, 99) for n in range(N)]
#
# def mergesort(A):
#     if len(A) < 2:
#         return A
#     mid = len(A)//2
#     return merge(mergesort(A[:mid]), mergesort(A[mid:]))
# v = time.time()
# print(mergesort(A))
# z = time.time()
# print(z-v)


s100=[0.00014090538024902344,0.00015091896057128906,0.0001437664031982422,0.00014090538024902344,0.0001418590545654297]
S100=sum(s100)/len(s100)
s150=[0.00021505355834960938,0.00024509429931640625,0.00021505355834960938,0.00021910667419433594,0.00021719932556152344]
S150=sum(s150)/len(s150)
s200=[0.0002830028533935547,0.00028586387634277344,0.0002810955047607422,0.0002837181091308594,0.0002830028533935547]
S200=sum(s200)/len(s200)
s250=[0.0003552436828613281,0.0003540515899658203,0.0003509521484375,0.000354766845703125,0.00035309791564941406]
S250=sum(s250)/len(s250)
s300=[0.0004298686981201172,0.0004298686981201172,0.0004661083221435547,0.00043010711669921875,0.00043392181396484375]
S300=sum(s300)/len(s300)
s350=[0.0005061626434326172,0.0005009174346923828,0.0005159378051757812,0.0005409717559814453,0.0005009174346923828]
S350=sum(s350)/len(s350)
s400=[0.0006082057952880859,0.0006051063537597656,0.0006031990051269531,0.0006091594696044922,0.0005850791931152344]
S400 = sum(s400)/len(s400)
s450=[0.0006511211395263672,0.0006570816040039062,0.0006558895111083984,0.0006659030914306641,0.0006520748138427734]
S450=sum(s450)/len(s450)
s500=[0.0007369518280029297,0.0007307529449462891,0.0007271766662597656,0.0007390975952148438,0.0007250308990478516]
S500=sum(s500)/len(s500)

# QuIcK SoRt
#
# def qsort(A, left=0, right=None):
#     if right is None:
#         right = len(A) - 1
#     if left >= right:
#         return
#     i = left
#     j = right
#     pivot = A[left]
#     while i <=j:
#         while A[i] < pivot:
#             i += 1
#         while A[j] > pivot:
#             j -= 1
#         if i <= j:
#             A[i], A[j] = A[j], A[i]
#             i += 1
#             j -= 1
#     qsort(A, left, j)
#     qsort(A, i, right)
# N=500
# A = [random.randint(1, 99) for n in range(N)]
# v=time.time()
# qsort(A)
# z=time.time()
# print(*A)
# print(z-v)

q100=[0.0000476837158203125,0.000051975250244140625,0.000049114227294921875]
Q100=sum(q100)/3
q150=[0.00007510185241699219,0.00007724761962890625,0.00007176399230957031]
Q150=sum(q150)/3
q200=[0.00010085105895996094,0.00009918212890625,0.00010180473327636719]
Q200=sum(q100)/3
q250=[0.00012683868408203125,0.00012421607971191406,0.0001270771026611328]
Q250=sum(q250)/3
q300=[0.0001850128173828125,0.00018787384033203125,0.0001938343048095703]
Q300=sum(q300)/3
q350=[0.0002429485321044922,0.00022912025451660156,0.00022482872009277344]
Q350=sum(q350)/3
q400=[0.00026679039001464844,0.0002789497375488281,0.0002689361572265625]
Q400=sum(q400)/3
q450=[0.0003190040588378906,0.00031065940856933594,0.00031876564025878906]
Q450=sum(q450)/3
q500=[0.00033783912658691406,0.0003368854522705078,0.0003647804260253906]
Q500=sum(q500)/3


# HeAp SoRt
def heap_add(A, value):
    A.append(value)
    i = len(A) - 1
    while i > 0 and A[i] > A[(i-1)//2]:
        A[i], A[(i-1)//2] = A[(i-1)//2], A[i]
        i = (i-1)//2


def heap_pop(A):
    res = A[0]
    if len(A) == 1:
        return res
    A[0] = A.pop()
    i = 0
    j = 2 * i + 1
    k = 2 * i + 2
    while j < len(A):
        if k < len(A):
            if A[j] >= A[k] and A[j] >= A[i]:
                A[i], A[j] = A[j], A[i]
                i = j
            elif A[k] >= A[j] and A[k] >= A[i]:
                A[i], A[k] = A[k], A[i]
                i = k
            else:
                break
        else:
            if A[i] < A[j]:
                A[j], A[i] = A[i], A[j]
                i = j
            else:
                break
        j = 2 * i + 1
        k = 2 * i + 2
    return res

def heap_sort(A):
    heap = []
    for el in A:
        heap_add(heap, el)
    for i in range(len(A)):
        A[len(A) - 1 - i] = heap_pop(heap)
N=500
A = [random.randint(1, 99) for n in range(N)]
v=time.time()
heap_sort(A)
z=time.time()
print(*A)
print(z-v)

h100=[0.0001399517059326172,0.00015497207641601562,0.00013113021850585938]
H100=sum(h100)/3
h150=[0.00019979476928710938,0.0002067089080810547,0.00020694732666015625]
H150=sum(h150)/3
h200=[0.00027871131896972656,0.00028514862060546875,0.0002827644348144531]
H200=sum(h200)/3
h250=[0.0003597736358642578,0.0003590583801269531,0.0003619194030761719]
H250=sum(h250)/3
h300=[0.00046634674072265625,0.0004649162292480469,0.0004792213439941406]
H300=sum(h300)/3
h350=[0.0005948543548583984,0.0005729198455810547,0.0005612373352050781]
H350=sum(h350)/3
h400=[0.0006802082061767578,0.0006818771362304688,0.0006699562072753906]
H400=sum(h400)/3
h450=[0.00080108642578125,0.0007789134979248047,0.0007839202880859375]
H450=sum(h450)/3
h500=[0.000885009765625,0.0008981227874755859,0.0008969306945800781]
H500=sum(h500)/3

x = [100, 150, 200, 250, 300, 350, 400, 450, 500]
yP = [0.0007328987121582031, 0.0021026134490966797, 0.003342151641845703, 0.00523686408996582, 0.007096052169799805, 0.009876012802124023, 0.012369871139526367, 0.016691923141479492, 0.021618127822875977]
yV = [0.0001728534698486328, 0.00035500526428222656, 0.0006029605865478516, 0.0009100437164306641, 0.0013148784637451172, 0.001828908920288086, 0.002496957778930664, 0.0032329559326171875, 0.0038459300994873047]
yZ = [0.000024, 0.000027, 0.00003, 0.0000319, 0.000035, 0.000037, 0.000039, 0.000041, 0.000044]
yM=[S100,S150,S200,S250,S300,S350,S400,S450,S500]
yQ=[Q100,Q150,Q200,Q250,Q300,Q350,Q400,Q450,Q500]
yH=[H100,H150,H200,H250,H300,H350,H400,H450,H500]
plt.plot(x, yZ, color = "green")
plt.plot(x, yP, color = "red")
plt.plot(x, yV, color = "blue")
plt.plot(x, yM, color = "black")
plt.plot(x, yQ, color = "black")
plt.plot(x, yH, color = "black")

plt.scatter(x, yP, label='Пузырек', color = "green")
plt.scatter(x, yV, label='Выбором', color = "red")
plt.scatter(x, yZ, label='Вставка', color = "blue")
plt.scatter(x, yM, label='Мердж', color = "yellow")
plt.scatter(x, yQ, label='КвикСорт', color = "pink")
plt.scatter(x, yH, label='Хип-Хоп', color = "grey")

plt.legend()
plt.show()


# Пузырь:
# 100 - 0.0007328987121582031
# 150 - 0.0021026134490966797
# 200 - 0.003342151641845703
# 250 - 0.00523686408996582
# 300 - 0.007096052169799805
# 350 - 0.009876012802124023
# 400 - 0.012369871139526367
# 450 - 0.016691923141479492
# 500 - 0.021618127822875977
#
# Выбором:
# 100 - 0.0001728534698486328
# 150 - 0.00035500526428222656
# 200 - 0.0006029605865478516
# 250 - 0.0009100437164306641
# 300 - 0.0013148784637451172
# 350 - 0.001828908920288086
# 400 - 0.002496957778930664
# 450 - 0.003114938735961914
# 500 - 0.0038459300994873047




